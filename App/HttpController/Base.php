<?php
/**
 * Created by PhpStorm.
 * User: Joql
 * Date: 2018/10/12
 * Time: 15:35
 */
namespace App\HttpController;

use EasySwoole\Config;
use EasySwoole\Core\Component\Di;
use EasySwoole\Core\Http\AbstractInterface\Controller;
use EasySwoole\Core\Component\Pool\PoolManager;
use EasySwoole\Core\Http\Response;

class Base extends Controller
{
    protected $db_pool;  //读写库连接池
    protected $db_slave_pool;  //读库连接池
    protected $_db;
    protected $_db_use = 0;  // 0 未使用  1：读写库使用中  2： 读库使用中
    protected $redis_lss_pool; //流媒体redis池
    protected $redis_wx_pool;  //微信 redis池
    protected $_redis;
    protected $_redis_use = 0; // 0 未使用  1：流媒体使用中  2： 微信使用中


    /**
     * 首页方法
     * @author : evalor <master@evalor.cn>
     */
    function index(){
        $this->response()->write('hello world');
        return true;
    }

    protected function init(){
        if($this->request()->getSwooleRequest()->server['request_method'] != 'POST'){
            $this->writeJsonSelf(['code'=>0,'message'=>'非法请求']);
            return false;
        }
        return true;
    }
    /**
     * use for:请求前
     * auth: Joql
     * @param $action
     * @return bool|null
     * date:2018-10-15 14:03
     */
    function onRequest($action): ?bool
    {
        parent::onRequest($action); // TODO: Change the autogenerated stub

        $this->db_pool = PoolManager::getInstance()->getPool('App\Utility\MysqlPool2');
        //$this->db_slave_pool = PoolManager::getInstance()->getPool('App\Utility\MysqlSlavePool');
        //$this->redis_lss_pool = PoolManager::getInstance()->getPool('App\Utility\RedisLssPool');
        //$this->redis_wx_pool = PoolManager::getInstance()->getPool('App\Utility\RedisPool');

        //$this->initDb();
        //$this->initDi();
        return true;
    }

    /**
     * use for:初始化DB连接池
     * auth: Joql
     * @return bool
     * date:2018-10-16 9:40
     */
    function initDb($type = 'master'){
        //
        if(!is_null($this->_db)){
            return $this->_db;
        }
        //使用读写库
        if($type == 'master') {
            $this->_db = $this->db_pool->getObj();
            if(is_null($this->_db)){
                $this->writeJsonSelf([
                    'code' => 0,
                    'message' => '用户太多了，请刷新重试',
                    'data' => 'mysql '.$this->_db
                ]);
                return false;
            }
            $this->_db_use = 1;
            return $this->_db;
        }

        //使用读库
        if($type == 'slave'){
            $this->_db = $this->db_slave_pool->getObj();
            if(is_null($this->_db)){
                $this->writeJsonSelf([
                    'code' => 0,
                    'message' => '用户太多了，请刷新重试',
                    'data' => 'mysql '.$this->_db
                ]);

                return false;
            }
            $this->_db_use = 2;
            return true;
        }

    }

    /**
     * use for:初始化redis连接处
     * auth: Joql
     * @return bool
     * date:2018-10-16 9:40
     */
    function initRedis($type = 'wx'){
        //微信 redis
        if($type == 'wx') {
            $this->_redis = $this->redis_wx_pool->getObj();
            if(is_null($this->_redis)){
                $this->writeJsonSelf([
                    'code' => 0,
                    'message' => '用户太多了，请刷新重试',
                    'data' => 'redis '.$this->_redis,
                ]);
                return false;
            }
            $this->_redis_use = 2;
            return $this->_redis;
        }
        //流媒体 redis
        if($type == 'lss') {
            $this->_redis = $this->redis_lss_pool->getObj();
            if(is_null($this->_redis)){
                $this->writeJsonSelf([
                    'code' => 0,
                    'message' => '用户太多了，请刷新重试',
                    'data' => 'redis '.$this->_redis,
                ]);
                return false;
            }
            $this->_redis_use = 1;
            return $this->_redis;
        }
    }

    /**
     * use for:依赖处理
     * auth: Joql
     * @param string $act
     * date:2018-11-01 15:58
     */
    function initDi($act='set'){
        //mysql模型名
        $list = [
            'Chat',
            'Consume',
            'Income',
            'Jwplayer',
            'Menu',
            'Msg',
            'Pay',
            'Recharge',
            'RechargeLimit',
            'Slide',
            'Tag',
            'Transcode',
            'Traffic',
            'User',
            'UserSpace',
            'UserSpacePerson',
            'VodFlag',
            'VodLogCount',
            'WechatUser',
            'WechatUserSpace',
        ];
        $di = Di::getInstance();
        foreach ($list as $v){
            $modal = '\App\Model\\'.$v;
            $act == 'set' ? $di->$act($v, $modal) : $di->$act($v);
        }
    }

    /**
     * use for:请求后
     * auth: Joql
     * @param $actionName
     * date:2018-10-15 14:03
     */
    function afterAction($actionName): void
    {
        parent::afterAction($actionName); // TODO: Change the autogenerated stub
        //释放读写库连接
        if($this->_db_use == 1){
            $this->db_pool->freeObj($this->_db);
        }
        //释放读库连接
        if($this->_db_use == 2){
            $this->db_slave_pool->freeObj($this->_db);
        }
        //释放流媒体redis连接
        if($this->_redis_use == 1){
            $this->redis_lss_pool->freeObj($this->_redis);
        }
        //释放微信redis连接
        if($this->_redis_use == 2){
            $this->redis_wx_pool->freeObj($this->_redis);
        }
        $this->initDi('delete');
    }

//****************************
//********** 共用方法 *********
//****************************

    /**
     * use for: old返回方式
     * auth: Joql
     * @param array $data
     * @return bool
     * date:2018-10-12 15:39
     */
    protected function writeJsonSelf($data){
        if(!$this->response()->isEndResponse()){
            $this->response()->write($data);
            $this->response()->withHeader('Content-type','application/json;charset=utf-8');
            $this->response()->withStatus(200);
            $this->response()->end();
            return true;
        }else{
            trigger_error("response has end");
            return false;
        }
    }

    /**
     * use for:格式化 hgetall 返回的单列数组
     * auth: Joql
     * @param array $arr
     * @return mixed
     * date:2018-10-12 15:40
     */
    protected function formatArray(array $arr){
        $data = [];
        foreach ($arr as $k => &$v){
            if($k % 2 == 0){
                $key = $v;
            }else{
                $data[$key] = $v;
            }
        }
        return $data;
    }

    /**
     * use for:跨域头部
     * auth: Joql
     * date:2018-10-26 9:10
     */
    protected function corsHeader(){
        if ($this->request()->getMethod() === 'OPTIONS') {
            $this->response()->withHeader('Access-Control-Allow-Origin', '*');
            $this->response()->withHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
            $this->response()->withHeader('Access-Control-Allow-Credentials', 'true');
            $this->response()->withHeader('Access-Control-Allow-Headers', 'Origin, Authorization, Accept, auth');
            $this->response()->withHeader('Access-Control-Allow-Credentials', 'true');
        }elseif ($this->request()->getMethod() === 'POST' || $this->request()->getMethod() === 'GET'  ){
            $this->response()->withHeader('Access-Control-Allow-Origin', '*');
            $this->response()->withHeader('Access-Control-Allow-Headers', 'Origin, Authorization, Accept, auth');
        }
    }


    /**
     * use for:xml转array
     * auth: Joql
     * @param $xml
     * @return mixed
     * date:2018-11-13 14:59
     */
    protected function xml2Array($xml)
    {
        $xml = simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA);
        return json_decode(json_encode((array)$xml), true);
    }

    /**
     * use for:生成随机数
     * auth: Joql
     * @param $length
     * @return string
     * date:2018-12-03 11:51
     */
    public function GetRandStr($length){
        $str='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        $len=strlen($str)-1;
        $randstr='';
        for($i=0;$i<$length;$i++){
            mt_srand();
            $num=mt_rand(0,$len);
            $randstr .= $str[$num];
        }
        return $randstr;
    }
}